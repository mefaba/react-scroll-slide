{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nexport const ReactScrollSlide = (props) => {\n  const [slideIndex, setSlideIndex] = useState({\n    current: 0,\n  });\n  const slideEl = useRef({});\n\n  //inject ref to children as properties to find top height of children\n  //find top height of children via element.getBoundingClientRect().top\n  //on mouse scroll, scroll to next component via built-in scrollIntoView()\n  //if infiniteScroll false do not loop index of slides. Use mode % to create infite index loops\n  //for better: scrollIntoView is so fast, create a customazable scroll animation. Idea change viewport offset height by css and animate with css.\n  useEffect(() => {\n    document.addEventListener(\"wheel\", handleScroll, {\n      passive: false,\n    });\n\n    return () => {\n      document.removeEventListener(\"wheel\", handleScroll, {\n        passive: false,\n      });\n    };\n  }, []);\n\n  const indexRangeLimiter = (xNumber, min, max) => {\n    if (xNumber > max) {\n      return max;\n    } else if (xNumber < min) {\n      return min;\n    } else {\n      return xNumber;\n    }\n  };\n  const handleScroll = (e) => {\n    e.preventDefault();\n    const slideLength = Object.keys(slideEl.current).length - 1;\n\n    if (e.deltaY > 0) {\n      setSlideIndex((prevSlideIndex) => {\n        let newIndex = indexRangeLimiter(prevSlideIndex.current + 1, 0, slideLength);\n        scrollToSlide(newIndex);\n        return { ...prevSlideIndex, current: newIndex };\n      });\n    } else if (e.deltaY < 0) {\n      setSlideIndex((prevSlideIndex) => {\n        let newIndex = indexRangeLimiter(prevSlideIndex.current - 1, 0, slideLength);\n        scrollToSlide(newIndex);\n        return { ...prevSlideIndex, current: newIndex };\n      });\n    }\n  };\n\n  const scrollToSlide = (index) => {\n    slideEl.current[index].scrollIntoView();\n  };\n\n  return (\n    <React.Fragment>\n      {props.children.map((child, index) =>\n        React.cloneElement(child, {\n          key: index,\n          ref: (ref) => (slideEl.current[index] = ref),\n        })\n      )}\n    </React.Fragment>\n  );\n};\n"],"names":["ReactScrollSlide","props","slideIndex","setSlideIndex","useState","current","slideEl","useRef","useEffect","document","addEventListener","handleScroll","passive","removeEventListener","indexRangeLimiter","xNumber","min","max","e","preventDefault","slideLength","Object","keys","length","deltaY","prevSlideIndex","newIndex","scrollToSlide","index","scrollIntoView","_jsx","React","Fragment","children","map","child","cloneElement","key","ref"],"mappings":"uTAEaA,MAAAA,EAAoBC,IAC/B,MAAOC,EAAYC,GAAiBC,EAAS,CAC3CC,QAAS,IAELC,EAAUC,EAAO,IAOvBC,EAAU,KACRC,SAASC,iBAAiB,QAASC,EAAc,CAC/CC,SAAS,IAGJ,KACLH,SAASI,oBAAoB,QAASF,EAAc,CAClDC,SAAS,MAGZ,IAEH,MAAME,EAAoB,CAACC,EAASC,EAAKC,IACnCF,EAAUE,EACLA,EACEF,EAAUC,EACZA,EAEAD,EAGLJ,EAAgBO,IACpBA,EAAEC,iBACF,MAAMC,EAAcC,OAAOC,KAAKhB,EAAQD,SAASkB,OAAS,EAEtDL,EAAEM,OAAS,EACbrB,EAAesB,IACb,IAAIC,EAAWZ,EAAkBW,EAAepB,QAAU,EAAG,EAAGe,GAEhE,OADAO,EAAcD,QACFD,GAAgBpB,QAASqB,MAE9BR,EAAEM,OAAS,GACpBrB,EAAesB,IACb,IAAIC,EAAWZ,EAAkBW,EAAepB,QAAU,EAAG,EAAGe,GAEhE,OADAO,EAAcD,QACFD,GAAgBpB,QAASqB,OAKrCC,EAAiBC,IACrBtB,EAAQD,QAAQuB,GAAOC,+BAGzB,OACEC,EAACC,EAAMC,mBACJ/B,EAAMgC,SAASC,IAAI,CAACC,EAAOP,iBAC1BG,EAAMK,aAAaD,EAAO,CACxBE,IAAKT,EACLU,IAAMA,GAAShC,EAAQD,QAAQuB,GAASU"}